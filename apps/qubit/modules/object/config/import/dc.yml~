# This file is part of Access to Memory (AtoM).
#
# Access to Memory (AtoM) is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Access to Memory (AtoM) is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with
# Access to Memory (AtoM); if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Dublin Core (dc) IMPORT FILTER MAPPINGS
#
# @package AccesstoMemory
# @subpackage object import
# @author Peter Van Garderen <peter@artefactual.com>
# @version svn: $Id:$
#
# filter for importing Dublin Core (dc) records

information_object:
  XPath:  "/dc | /dublinCore | /metadata | /record | /oai_dc:dc"
  Object:  InformationObject
  # define an axis for the parent object; if no node is matched here, the object is rooted if possible
  Parent:  "ancestor::record"
  Methods:
    collection_type:
      XPath:   "."    # not really a match, just use self
      Method:  setCollectionTypeId
      Parameters: [QubitTerm::PUBLISHED_MATERIAL_ID]

    sourceStandard:
      XPath:   "."    # not really a match, just use self
      Method:  setSourceStandard
      Parameters: ["'http://purl.org/dc/elements/1.1/'"]

    publicationStatus:
      XPath:   "."    # not really a match, just use self
      Method:  setStatus
      Parameters: ["array('typeId' => QubitTerm::STATUS_TYPE_PUBLICATION_ID, 'statusId' => sfConfig::get('app_defaultPubStatus', QubitTerm::PUBLICATION_STATUS_DRAFT_ID))"]

    # each of the following XPath expressions are relative to the current matched node:

    title:
      XPath:  title
      Method:  setTitle

    creator:
      XPath:  creator
      Method:  setActorByName
      Parameters: [$nodeValue, "$options = array('event_type_id' => QubitTerm::CREATION_ID)"]

    subject:
      XPath:  subject
      Method:  setTermRelationByName
      Parameters: [$nodeValue, "$options = array('taxonomyId' => QubitTaxonomy::SUBJECT_ID)"]

    description:
      XPath:  description
      Method:  setScopeAndContent

    publisher:
      XPath:  publisher
      Method:  setActorByName
      Parameters: [$nodeValue, "$options = array('event_type_id' => QubitTerm::PUBLICATION_ID)"]

    contributor:
      XPath:  contributor
      Method:  setActorByName
      Parameters: [$nodeValue, "$options = array('event_type_id' => QubitTerm::CONTRIBUTION_ID)"]

    date:
      XPath:  date
      Method:  setDates

    type:
      XPath:  type
      Method:  setTermRelationByName
      Parameters: [$nodeValue, "$options = array('taxonomyId' => QubitTaxonomy::DC_TYPE_ID)"]

    format:
      XPath:  format
      Method:  setExtentAndMedium

    identifier:
      XPath:  identifier
      Method: setIdentifier

    source:
      XPath:  source
      Method:  setLocationOfOriginals

    language:
      XPath:  language
      Method:  importDCLanguage

    relation:
      XPath:  relation
      Method:  setRepositoryByName

    coverage:
      XPath:  coverage
      Method:  setTermRelationByName
      Parameters: [$nodeValue, "$options = array('taxonomyId' => QubitTaxonomy::PLACE_ID)"]

    rights:
      XPath:  rights
      Method:  setAccessConditions
