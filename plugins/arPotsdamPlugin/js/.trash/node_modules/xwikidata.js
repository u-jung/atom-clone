
jQuery(document).ready(function(){

/***********************************************  Wikidata ****************************************************************** */		
	
	function showWD(){
			
			jQuery('#popup-translation').css("display","none");
			jQuery('#wd').css("display","none");
			jQuery('#map').css("display","none");
			jQuery('#wd').css("display","flex");
			jQuery('#wd').css("position","absolute");
			var newHeight = (jQuery("html").height() - 150 )  + "px";
			jQuery('#wd-content-container').css("display","flex");
			jQuery("#wd").css("height", newHeight); 
			jQuery("#wd").css("z-index", 10); 
			jQuery("#wd-content").html();
			jQuery('#wd-content').html('<li style="border:2px solid #ff0000; padding:5px">' + __('<h3>Thesaurus</h3>Rechts sehen Sie eine Liste von Entitäten.<br /> Klicken Sie auf ein Element um sich weitere Details anzeigen zu lassen.<br />Mit der Lupe können sie nach dem begriff in der Datenbank suchen.<br />Alle Daten werden direkt aus Wikidata abgefragt. (Siehe auch: <a href="http://wikidata.org" target="blank">www.wikidata.org</a>' ) + '</li>')
			var data = [
				{
					name: 'Deutsche Kolonien',
					id: "Q329618",
					type: "kolonien",
					children:[
						{"name":"Deutsch-Neuguinea","item":"http://www.wikidata.org/entity/Q165008","id":"Q165008","type":"kolonie"},
						{"name":"Deutsch-Ostafrika","item":"http://www.wikidata.org/entity/Q153963","id":"Q153963","type":"kolonie"},
						{"name":"Deutsch-Südwestafrika","item":"http://www.wikidata.org/entity/Q153665","id":"Q153665","type":"kolonie"},
						
						
						{"name":"Kamerun","item":"http://www.wikidata.org/entity/Q668294","id":"Q668294","type":"kolonie"},
						{"name":"Kiautschou","item":"http://www.wikidata.org/entity/Q675321","id":"Q675321","type":"kolonie"},
						
						{"name":"Samoa","item":"http://www.wikidata.org/entity/Q26271738","id":"Q26271738","type":"kolonie"},
						{"name":"Togo","item":"http://www.wikidata.org/entity/Q161062","id":"Q161062","type":"kolonie"},
						{"name":"Wituland","item":"http://www.wikidata.org/entity/Q30607493","id":"Q30607493","type":"kolonie"}
						]
				},
								{
					name: 'Deutsches Reich',
					id: "Q1206012",
					type: "deutschland"
				}
			];

			
			jQuery('#tree1').tree({
				dragAndDrop: false,
				data: data,
				 buttonLeft: true,
				 saveState: true,
				onCreateLi: function(node, $li) {
					$li.attr('id',"li"+node.id);
					
						$li.find('.jqtree-element').append('<a href="https://www.wikidata.org/wiki/'+node.id+'" target="_blank" class="'+node.type+'" title="'+__("Gehe zur Wikidata-Seite")+'">&nbsp;&nbsp;<img src="/plugins/arArchivesCanadaPlugin/images/wikidata.ico"></a> <a  href="#" class="searchFromWd"  id="'+node.id+'" title="Search for \''+node.name+'\' inside the database" >&nbsp;&nbsp;&nbsp;</a>');
						
					
					}
				
			});
			
			/*expand(jQuery('#tree1').tree)*/
			
				// bind 'tree.click' event
				
			jQuery('#tree1').bind(
				'tree.click',
				function(event) {
					// The clicked node is 'event.node'
					
					var node = event.node;
					var wdid= node.id;

					var id= node.id;
					var type=node.type;

					var sub, prop;
					if(node.id==null){alert;return};
					console.log(jQuery('#li'+node.id+ "ul").attr("display"));
					if(jQuery('#li'+node.id+ " ul").length>0){
						if(jQuery('#li'+node.id+ " ul").attr("display")=="block"){
							jQuery('#li'+node.id+ " ul").attr("display", "none")
						}
						else{
							jQuery('#li'+node.id+ " ul").attr("display", "block")
						}
						
					}
					if (type  == "kolonie"){
						
						if(culture="de"){
							sub=[	{name:"Details",type:'detailed_data',id:wdid},
									{name:"Chronologie",type:'chronologie',id:wdid},
									{name:"Personen",type:'personen',id:wdid},
									{name:"Verwaltung", type:'verwaltungen', id:wdid},
									{name:"Unternehmen",type:'firmen', id:wdid},
									{name:"Missionen",type:'missionen', id:wdid},
									{name:"Militär",type:'militaer',id:wdid}					
							]
						}
						if(culture="en"){
							sub=[	{name:"Details",type:'detailed_data',id:wdid},
									{name:"Chronology",type:'chronologie',id:wdid},
									{name:"People",type:'personen',id:wdid},
									{name:"Administration", type:'verwaltungen', id:wdid},
									{name:"Companies",type:'firmen', id:wdid},
									{name:"Missionary Societies",type:'missionen', id:wdid},
									{name:"Military",type:'militaer',id:wdid}					
							]
						}						
						if(culture="fr"){
							sub=[	{name:"Détails",type:'detailed_data',id:wdid},
									{name:"Chronologie",type:'chronologie',id:wdid},
									{name:"Persones",type:'personen',id:wdid},
									{name:"Administration", type:'verwaltungen', id:wdid},
									{name:"Entreprises",type:'firmen', id:wdid},
									{name:"Missions",type:'missionen', id:wdid},
									{name:"Militair",type:'militaer',id:wdid}					
							]
						}						
						
						
						
						
						
						
						loadTreeData(sub,node);
						
					}
					else{
						query=buildWdQuery(type, wdid,prop,culture);
						sub=getFromWd(query[0],node,query[1]);
					}
					jQuery('#tree1').on('click', '.searchFromWd', function(e) {
						/*Start search of WD from Tree node*/
						showLoader();
						searchFromWd(jQuery(this).attr("id"));
					});					
				
				}
				
			);
			
			/*jQuery('#tree1 jqtree-element .searchFromWd'  ).on( "singleclick", function() {alert("Heureka") } );*/
			
			/*console.log(getFromWd(buildWdQuery('kolonien',"Q329618","P361",culture,),'','kolonien'));*/
		
	}
	
	
	function expand(node){
		node.iterate(function(child) {
			if (child.isFolder()) {
				$tree.tree('openNode', child);
			}

			return true;
		});
	}
	
	function loadTreeData(data,node){
		jQuery('#tree1').tree('loadData',data,node);
	}
	
	function closeLetterNodes(){
		var tree = jQuery("#tree1").tree('getTree');

		tree.iterate(
			function(node, level) {
				if (node) {
					
					if (node.name.length == 1) {
						console.log(node.name);
						jQuery('#tree1').tree('closeNode', node, true);
						return false;
					}
					return true;
				}
			}
		);
		
	}
	
	function buildWdQuery(type,subj,prop, lang='de'){
			console.log(type);	
		
		if(type=="kolonien"){
			query='select  ?item ?itemLabel Where { bind(wd:'+subj+' as ?concept).?item wdt:P361  ?concept .  SERVICE wikibase:label { bd:serviceParam wikibase:language "'+lang+',de,en" }} Order BY ?itemLabel';
			type='kolonie';
		}

		

		/*
		if(type=='person'){
			query= 'PREFIX entity: <http://www.wikidata.org/entity/>  \
					SELECT distinct ?propUrl ?propLabel ?valUrl ?valLabel \
					WHERE  \
					{ \
						hint:Query hint:optimizer "None" . \
						{	BIND(entity:'+subj+' AS ?valUrl) . \
							BIND("N/A" AS ?propUrl ) . \
							BIND("identity"@en AS ?propLabel ) . \
						} \
						UNION \
						{	entity:'+subj+' ?propUrl ?valUrl .  \
							?property ?ref ?propUrl .  \
							?property rdf:type wikibase:Property .  \
							?property rdfs:label ?propLabel  \
						} \
						?valUrl rdfs:label ?valLabel \
						FILTER (LANG(?valLabel) = "'+lang+'") . \
						OPTIONAL{ ?valUrl wdt:P18 ?picture .} \
						FILTER (lang(?propLabel) = "'+lang+'" ) \
					} \
					ORDER BY ?propUrl ?valUrl ';
			type='detailed_data';
		}
		*/
		if(type=='person'){type='detailed_data'};
		if(type=='verwaltung'){type='detailed_data'};
				
		if(type == 'detailed_data'){
			query=	'PREFIX entity: <http://www.wikidata.org/entity/> \
					SELECT ?propNumber ?propLabel ?val  \
					WHERE \
					{ \
						hint:Query hint:optimizer "None" . \
						{	BIND(entity:'+subj+' AS ?valUrl) . \
							BIND("N/A" AS ?propUrl ) . \
							BIND("Name"@de AS ?propLabel ) . \
						    entity:'+subj+' rdfs:label ?val . \
						    FILTER (LANG(?val) = "'+lang+'") \ 	} \
						 UNION \
						{ \
						   optional{ \
							 BIND(entity:'+subj+' AS ?valUrl) . \
							 BIND("Image"@de AS ?propLabel ) . \
							 BIND("18000" AS ?propNumber ) . \
							 entity:'+subj+' wdt:P18 ?val. \
						   } \
						}\
						UNION \
						{optional{ ?valUrl schema:about entity:'+subj+'. \
								 ?valUrl schema:inLanguage "de" . \
								BIND("Wikipedia@de"@de AS ?propLabel ) . \
								BIND(str(?valUrl) AS ?val)} \
								BIND("5" AS ?propNumber ) . \
						} \
						UNION{ \
								BIND(str(entity:'+subj+') AS ?val) . \
								BIND("Wikidata"@de AS ?propLabel ) .  \
								BIND("0" AS ?propNumber ) . \
						} \
						UNION \
						{   BIND(entity:'+subj+' AS ?valUrl) . \
							BIND("AltLabel"@de AS ?propLabel ) .  \
							BIND("4" AS ?propNumber ) . \
							optional{entity:'+subj+' skos:altLabel ?val}.  \
							FILTER (LANG(?val) = "'+lang+'")  } \
						UNION \
							{BIND(entity:'+subj+' AS ?valUrl) . \
							BIND("Description"@de AS ?propLabel ) .  \
							BIND("3" AS ?propNumber ) . \
							optional{entity:'+subj+' schema:description ?val}. \
							FILTER (LANG(?val) = "'+lang+'")  \
						} \
						UNION \
						{	entity:'+subj+' ?propUrl ?valUrl . \
							?property ?ref ?propUrl . \
							?property rdf:type wikibase:Property . \
							?property rdfs:label ?propLabel. \
							FILTER (lang(?propLabel) = "'+lang+'") \
							filter  isliteral(?valUrl)  \
							BIND(?valUrl AS ?val) \
						} \
						UNION \
						{	entity:'+subj+' ?propUrl ?valUrl . \
							?property ?ref ?propUrl . \
							?property rdf:type wikibase:Property . \
							?property rdfs:label ?propLabel. \
							FILTER (lang(?propLabel) = "'+lang+'" )  \
							filter  isIRI(?valUrl)  \
							?valUrl rdfs:label ?valLabel  \
							FILTER (LANG(?valLabel) = "'+lang+'")  \
							 BIND(CONCAT(?valLabel) AS ?val) \
						} \
							BIND( SUBSTR(str(?propUrl),38, 250) AS ?propNumber) \
					} \
					ORDER BY xsd:integer(?propNumber)';
			
			
			
			type='detailed_data';
		}
		
		if(type=="zugehoerig"){
			query='SELECT DISTINCT ?item ?itemLabel ?bodyLabel   ?von ?bis ?position  ?bemerkung ?vonPrecision ?bisPrecision \
					{ \
					  bind (wd:'+subj+' as ?body) \
					  ?item wdt:P31 wd:Q5 . \
					  ?item p:P1416 ?position_statement .   \
					  ?position_statement ps:P1416 ?body . \
					  OPTIONAL { ?position_statement pq:P580 ?von} \
					  OPTIONAL { ?position_statement pq:P582 ?bis} \
					  OPTIONAL { ?position_statement pqv:P580 ?vonnode.\
								?vonnode  wikibase:timePrecision     ?vonPrecision. \
								?vonnode  wikibase:timeValue    ?von.   \
								} \
					  OPTIONAL { ?position_statement pqv:P582 ?bisnode.\
								  ?bisnode wikibase:timePrecision     ?bisPrecision.    \
								  ?bisnode wikibase:timeValue     ?bis.  \
						} \
					  OPTIONAL { ?position_statement pq:P106/rdfs:label ?position filter (lang(?position) = "'+lang+'") .  } \
					  OPTIONAL { ?position_statement pq:P2868/rdfs:label ?bemerkung filter (lang(?bemerkung) = "'+lang+'")  } \
					  SERVICE wikibase:label { bd:serviceParam wikibase:language "'+lang+',de" . } \
					} \
					ORDER BY ?von ?position' 
		}
		if (type=="chronologie"){
			query=	'prefix var: <http://www.wikidata.org/entity/'+subj+'>  \
					SELECT ?item  (concat(?typ, ?iLabel) as ?itemLabel) ?von ?bis ?nr  \
					WHERE  \
					{  \
						{var: p:P31 ?statement.  \
						 ?statement ps:P31 ?item.  \
						 ?item rdfs:label ?iLabel.  \
						 bind("" as ?typ)  \
						 bind(1 as ?nr)  \
						 optional{?statement pq:P580 ?von.}  \
						 optional{?statement pq:P582 ?bis.}  \
						  filter (isLiteral((DATATYPE(?von) = xsd:dateTime )|| (DATATYPE(?bis) = xsd:dateTime )))  \
						 FILTER((LANG(?iLabel)) = "de")}  \
					  union  \
						 { var: p:P36 ?statement.  \
						 ?statement ps:P36 ?item.  \
						 ?item rdfs:label ?iLabel.  \
						 bind(3 as ?nr)  \
						 bind("Hauptort: " as ?typ)  \
						 optional{?statement pq:P580 ?von.}  \
						 optional{?statement pq:P582 ?bis.}  \
						 FILTER((LANG(?iLabel)) = "de")}  \
					  union  \
						 { var: p:P131 ?statement.  \
						 ?statement ps:P131 ?item.  \
						 ?item rdfs:label ?iLabel.  \
						 optional{?statement pq:P580 ?von.}  \
						 optional{?statement pq:P582 ?bis.}  \
						 filter (isLiteral((DATATYPE(?von) = xsd:dateTime )|| (DATATYPE(?bis) = xsd:dateTime )))  \
						 bind("Teil von: " as ?typ)  \
						 bind(2 as ?nr)  \
						 FILTER((LANG(?iLabel)) = "de")}  \
					  union  \
						{  \
						var: wdt:P571 ?von.  \
						bind("Gegründet: " as ?typ)  \
						bind("" as ?iLabel)  \
						bind(0 as ?nr)  \
						}  \
					  union  \
						{  \
						var: wdt:P576 ?bis.  \
						bind("Aufgelöst: " as ?typ)  \
						bind("" as ?iLabel)  \
						 bind(4 as ?nr)  \
					  }  \
					}  \
					ORDER BY ?nr ?von'  
		}
		
		/*Reihenfolge beachten Personen -> Person*/
		if(type=='personen'){
			query='select distinct ?item ?itemLabel ?itemDescription where {  ?item wdt:P31 wd:Q5 .  ?item wdt:P937 wd:'+subj+' . SERVICE wikibase:label { bd:serviceParam wikibase:language "'+lang+',de,en". }}order by ?itemLabel';
			type='person';		
		}

		if(type=='verwaltungen'){
			/* match Behörde:Q327333  bzw. Bezirksverwaltungsbehörde:Q854399 bzw. Verwaltungssitz Q1306755*/
			query='select distinct  ?item ?itemLabel ?itemDescription Where  {  bind(wd:'+subj+' as ?concept).  ?item wdt:P361  ?concept .  {{?item wdt:P31/wdt:P279* wd:Q327333 }    UNION {?item wdt:P31/wdt:P279*  wd:Q854399} UNION {?item wdt:P31/wdt:P279*  wd:Q1306755}}    SERVICE wikibase:label { bd:serviceParam wikibase:language "'+lang+',de,en". }  }Order BY ?itemLabel';
			type='verwaltung';	
		}	
		
		if(type=='labels'){
			query='select ?item ?itemLabel ?itemAltLabel Where { bind(wd:'+subj+' as ?item). Optional{?item skos:altLabel ?itemAltLabel . } ?item rdfs:label ?itemLabel   }';
		}
		
		
		if(type=="OneProp"){
			query='select ?item ?itemLabel Where { ?item wdt:'+prop+' wd:'+subj+' SERVICE wikibase:label { bd:serviceParam wikibase:language "'+lang+',de,en" }  } Order by ?itemLabel';			
		}

		console.log(query, type);
			return [encodeURI(query), type];
	
	
	}
	
	
	function getFromWd(query,node, type){
				
			base_url='https://query.wikidata.org/sparql';
		
			url=base_url+"?format=json&query="+query;
		console.log(url);
			showLoader();
			jQuery.get(url,
			function(data, status){
				WdResponse(data,node, type);
				showLoader();
			}).fail(function(){showLoader()});
			return (query);
	}
	
	function WdResponse(data,node, type){
		var nodeData;

		console.log(JSON.stringify(data['results']));
		nodeData=prepareData(data['results']['bindings'],node, type);
		console.log(nodeData);
		if(type=='labels'){
			lookupPlaces(nodeData);
			return;
		}
		if(type=='detailed_data'){

			if(node!=null){
				if(node.parent.type=="verwaltungen"){
					data=[	{name:"Chronologie",type:'chronologie',id:node.id},
							{name:"Zugehörigkeiten", type:'zugehoerig', id:node.id},
							{name:"Untergeordnete Einheiten", type:'untergeordnet', id:node.id},
					]
					loadTreeData(data,node);
				};
			}
			return;
		}
		
		if (["zugehoerig", "chronologie"].indexOf(type)!=-1){
			return;
		}
		/*jQuery('li').find('.jqtree-selected').append(" [" + nodeData.length + "] ");*/
		if(node.name.search("]")<1){
			if(type!="person"){
				node.name=node.name + " ["+nodeData.length+"] ";
			}
		}
		
		loadTreeData(nodeData,node);
		closeLetterNodes();
		/*if(nodeData[0]["children"].length>0){
			jQuery('#tree1').tree('closeNode',node);
		}*/

		}
	
	
	function prepareData(results,node,type){

		var ar;
		var nodeData=[];
		for (i=0; i< results.length;i++){
			nodeData.push({'name':''});
			for(var key in results[i]){
	
				if (key=="itemLabel"){
					nodeData[i]['name']=results[i]['itemLabel']['value'];
				}
				else{
					
					nodeData[i][key]=results[i][key]['value'];
				}
				if(key=="item"){
					nodeData[i]['id']=results[i]['item']['value'].match(/[^\/]*$/i)[0];
				}
			}
			nodeData[i]['type']=type;
			
		}
		
		/*detailed_data*/
		if (type=='detailed_data'){
			console.log(nodeData);
			nodeData=prepareDetails(nodeData,type,"#wd-content");
		    
		}
		
		if (type=='zugehoerig'){
		console.log("zugehoerig");
			nodeData=prepareTable(nodeData, type,'Name', ['bodyLabel','vonPrecision','bisPrecision'],"#wd-content", 1, node.parent.name + " (" + node.name + ")", "person");
			return;
		}
		
		if (type=='chronologie'){

			nodeData=prepareTable(nodeData, type,'', ['nr'],"#wd-content", 1, node.parent.name + " (" + node.name + ")");
			return;
		}
		
		/*Extract WD Labels for search*/
		if(type=='labels'){
			ar=[];
			var uniqLabels=[];
			for(i=0; i< nodeData.length;i++){
				ar.push(nodeData[i].name);
				ar.push(nodeData[i].itemAltLabel);
			}

			jQuery.each(ar, function(i, el){
				if(jQuery.inArray(el, uniqLabels) === -1) uniqLabels.push(el);
			});
			nodeData=uniqLabels;
		};
		
		
		/* Changing the order inside the name field*/
		if(type=='person'){
			     
			var index, z, n, arStr;
			var ar=[];
				for(i=0; i< nodeData.length;i++){

					arStr=nodeData[i]['name'].toString();
					ar=arStr.split(" ");
					index=ar.indexOf('von')+1;

					if(index==0){
						console.log("len null" + ar.length);
						index=ar.length - 1;
					}
					n="";
							console.log(index);							
					for (j=0;j<index;j++){
									console.log(ar);
						
						ar.push(ar[0]);
						console.log(ar);
						ar.shift();
									console.log(ar);
					}
					for(j=0;j<ar.length;j++){

						if(j==ar.length-index){
							n += ", " + ar[j];
						}
						else{
							n+= " " + ar[j];
						}
					nodeData[i]['name']=n.trim();
						console.log(n);
					}
					
				}
		console.log(JSON.stringify(nodeData));			
			nodeData.sort(function(a, b){
				var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
				if (nameA < nameB) 
					return -1 
				if (nameA > nameB)
					return 1
				return 0 
				})
		/*	
			if(nodeData.length>0){
				var tmpnodedata=[];
				var f_letter=nodeData[0]['name'].charAt(0);
				
				tmpnodedata.push({"name":f_letter, children:[]});
				for(i=0; i< nodeData.length;i++){
					if(nodeData[i]['name'].charAt(0)==f_letter){
						tmpnodedata[tmpnodedata.length-1]['children'].push(nodeData[i]);
					}
					else{
						f_letter=nodeData[i]['name'].charAt(0);
						tmpnodedata.push({"name":f_letter,children:[]});
						tmpnodedata[tmpnodedata.length-1]['children'].push(nodeData[i]);
					}
				}
			}
			nodeData=tmpnodedata;
		*/
			
		}
		console.log(JSON.stringify(nodeData));
		/*jQuery('#tree1').tree('loadData', nodeData,node);*/
		return nodeData;
	}
	
	
	/*writes a list of dict into a table*/	
	function prepareTable(data, type,itemTitle, excludeList,target, linked,title, target_type=type){
		console.log(linked);
		/*
		 nodeData: the data array (list of dicts)
		 type: type of data
		 itemTitle: Literal to replace the 'itemLabel' column
		 excludeListe: Array List with columns which should not be included
		 target: target div 
		 linked: boolean if itemLabel should be enriched with links of item
		 title: Title of the table
		 * item should be placed before itemLabel
		 */
		
		var uStr='<h3>'+title+'</h3><table class="zebra">';
		uStr+="<tr>";
		for (var key in data[0]){
				if ((["item","type","id"].indexOf(key)==-1 ) && (excludeList.indexOf(key)==-1) ){
					if(key=="itemLabel"){
						uStr+=itemTitle;
					}
					else{
							uStr+="<th>"+key.charAt(0).toUpperCase() + key.slice(1)+"</th>";
					}
				}
		}			
		uStr+="<th></th></tr>";
		for(i=0; i< data.length;i++){
			uStr+="<tr>";
			for (var key in data[i]){

				console.log((["item","type","id"].indexOf(key)==-1 ) && (excludeList.indexOf(key)==-1));
				if((["item","type","id"].indexOf(key)==-1 ) && (excludeList.indexOf(key)==-1)){
					console.log(key,itemTitle);
					if(key.toLowerCase()==itemTitle.toLowerCase()){
						if (linked==1){
							uStr+="<td>"+'<a href="#" id="'+data[i]['item'].match(/[^\/]*$/i)[0]+'|'+target_type+'" >'+data[i][key]+'</a>'+"</td>";
						}
						else{
							uStr+="<td>"+data[i][key]+"</td>";
						}
						
					}
					else{
							uStr+="<td>"+testDate(data[i][key], data[i][key+"Precision"])+"</td>";

					}
				}
			}
			uStr+="</tr>";
		}
		uStr+="</table>";
		if (data.length ==0){uStr+="<p>"+__("Keine Daten vorhanden")+"</p>"};

		writeDiv(target,uStr, type);
		return uStr;
	};
	
	/*manage the wd div*/
	function writeDiv(target,uStr, type){
		jQuery(target).html("");
		if(typeof(uStr)=="string"){
			jQuery(target).append(uStr);
			wdArray.push(uStr);
			console.log(wdArray);
			pWdArray=wdArray.length-1;		
		}
		else{
			elementId=uStr;
			
			console.log(wdArray.length, pWdArray, elementId);
			if(jQuery(elementId).attr("id")=="wd-back"){
				if(pWdArray>0){pWdArray-=1};
			}else
			{
				if(pWdArray<wdArray.length-1){pWdArray+=1};
			}
			jQuery(target).append(wdArray[pWdArray]);
		}
		
		
		;

			
	}
	
	
	
	/*Prepares the output of wd-content details*/
	function prepareDetails(data,type,target){
		var uStr = "<dl>", logo;
		var content, label;
		var trenner=" :  ";
		var arUri=getAuthorityURI();
		var prop=0;
	
		console.log(arUri);
		for(i=0; i< data.length;i++){

			content=data[i].val;
			label=data[i].propLabel;
			prop=data[i].propNumber;
			console.log(label);
			if (label==null || label==undefined){
				label=" ";
				content=".";
				continue;
			}
			console.log(content, label, trenner);
			var index;
			if (label=="Name"){
				content="<b>"+content+"</b>";
		
				trenner="";
			}
			if (content.substr(0,4).toLowerCase()=="http"){
				content='<a href="'+content+'" target="_blank">'+content+"</a>";
				
	
			}
			if (label=="Description"){
				content=""+content+"";

				trenner="";
			}
			if (label=="Wikidata"){
				logo='<a target="_blank" href="'+data[i].val+'" title="'+__("Gehe zur Wikidata-Seite")+'"><img src="/plugins/arArchivesCanadaPlugin/images/wd.png"/></a>';
				continue;
				
			}
			/*if (label=="Image"){
				content='<img src="'+content+'" />';
				label="";
				trenner="";
			
			}*/

			/*if (label=="Image4"){
				content='';
				label="";
				trenner="";
				content=content.match(/[^\/]*$/i)[0];

				jQuery.ajax( {
					url: "https://www.mediawiki.org/w/api.php?action=query&format=json&prop=imageinfo&titles=File:"+content+"&iiprop=url&iiurlwidth=100",
					data:"",
					dataType: 'json',
					type: 'POST',
					headers: { 'Api-User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36' },
					success: function(data) {
					   // do something with data
					},
					error:function(data){
						console.log("error");
						
					}
				} );
			}*/
			index=arUri.indexOf(parseInt(prop))
			console.log(index, prop);
			if(index>-1){
				content='<a href="'+arUri[index+1].replace("$1",content)+'" target="_blank">'+content+'</a>';
			}
			
			uStr+='<dt>'+label+"</dt><dd>"+testDate(content)+"</dd>";
		
		}
		uStr+="</dl>" + logo;
		writeDiv(target,uStr, type);
		return uStr;
	}
	
	/*https://www.mediawiki.org/w/api.php?action=query&format=json&prop=imageinfo&titles=File:Von%20Puttkamer%20in%20full%20dress.jpg&iiprop=url&iiurlwidth=100&origin=*  */
	
	
	
	function searchFromWd(id){
	
		var labels;
		
		labels=getLabels(id);
	}
	
	
	function getLabels(id){
	
		getFromWd(buildWdQuery('labels',id,"", culture)[0],"", 'labels');
	};
	
	function showLoader(){
		console.log(jQuery('.loader').css("display"));
		var newLeft= Math.floor((jQuery("html").width() / 2 - 200  ) ) + "px";
		jQuery(".loader").css("left", newLeft); 
		if (jQuery('.loader').css("display")=="none"){
			jQuery('.loader').css("display", "block")
		}
		else{
			jQuery('.loader').css("display", "none")
		}
	}
	
	
	function testDate(wdDate,precision="9"){
		if (wdDate.match(/[0-9-]{10}T[0-9:]{8}Z/i) == null){return wdDate};
		var year = wdDate.slice(0,4);
		var month=wdDate.slice(5,7);
		var day= wdDate.slice(8,10);
		if (precision=="9"){return year};
		if (precision=="10"){return month +'/'+year};
		return day + "." +month +'.'+year;
	}
	
/*end of jQuery.document(ready)*/

});	
